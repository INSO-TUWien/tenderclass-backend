openapi: 3.0.0
info:
  description: Backend for Machine Learning solution to screen public tenders automatically.
  version: 1.0.0
  title: tenderclass-backend
  contact:
    email: e11709460@student.tuwien.ac.at
servers:
  - url: 'http://localhost:5000/api/v1'
tags:
  - name: ML Model
    description: API for the Machine Learning Model
paths:
  /web/recommendations:
    get:
      tags:
        - ML Model
      parameters:
        - name: count
          in: query
          schema:
            type: integer
      summary: Returns today's tender recommendations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tender'
  /web/train:
    post:
      tags:
        - ML Model
      summary: Trains the existing model with new tenders
      requestBody:
        description: JSON of list of tenders and list of labels
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/trainingtuples'
      responses:
        '200':
          description: OK
  /model/new:
    post:
      tags:
        - ML Model
      summary: Create a new model
      responses:
        '200':
          description: OK
  /model/save:
    post:
      tags:
        - ML Model
      summary: Save a trained model
      requestBody:
        description: Model name
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model_name'
      responses:
        '200':
          description: OK
  /model/load:
    post:
      tags:
        - ML Model
      summary: Load a trained model
      requestBody:
        description: Model name
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/model_name'
      responses:
        '200':
          description: OK
  /model/train-from-datasets:
    post:
      tags:
        - ML Model
      summary: Train a model from already fetched dataset
      requestBody:
        description: Location of the positive and negative training instances
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dataset-location-model'
      responses:
        '200':
          description: OK
  /model/validate-on-dataset:
    post:
      tags:
        - ML Model
      summary: Validate a trained model on a given dataset
      requestBody:
        description: Filenames of a positive and negative dataset
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dataset-location-model'
      responses:
        '200':
          description: Validation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validation_result'
  /fetch/ted:
    post:
      tags:
        - ML Model
      summary: Fetch and save Tender from TED
      requestBody:
        description: Search criteria and storage lcoation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/fetch_ted_model'
      responses:
        '200':
          description: OK
components:
  schemas:
    tender:
      type: object
      properties:
        id:
          type: string
          format: string
        cpvs:
          type: array
          items:
            type: string
        languageEntities:
          type: array
          items:
            type: object
            properties:
              schema:
                $ref: '#/components/schemas/languageentity'
    trainingtuples:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
        labels:
          type: array
          items:
            type: integer
      example:
        ids:
          - EU00001
          - EU00002
          - EU00003
        labels:
          - 1
          - 0
          - 1
    trainingconfiguration:
      type: object
      properties:
        pos_number:
          type: integer
          format: integer
        neg_number:
          type: integer
          format: integer
        pos_search_criteria:
          type: integer
          format: integer
        neg_search_criteria:
          type: integer
          format: integer
      example:
        pos_number: 1000
        neg_number: 1000
        pos_search_criteria: " AND PC=[72*]"
        neg_search_criteria: " AND NOT PC=[72*]"
    dataset-location-model:
      type: object
      properties:
        pos_filename:
          type: string
          format: string
        neg_filename:
          type: string
          format: string
      example:
        pos_filename: "example-pos.json"
        neg_filename: "example-neg.json"
    languageentity:
      type: object
      properties:
        language:
          type: string
          format: string
        title:
          type: string
          format: string
        description:
          type: string
          format: string
      example:
        language: DE
        title: Software- und Systemprogrammierung für hauseigenes ERP-System
        description: 'Für unser hauseigenes ERP-System soll ein Erweiterungsmodul entwickelt werden, das erlaubt, Python-Skripte einzubetten.'
    model_name:
      type: object
      properties:
        name:
          type: string
          format: string
      example:
        name: "example-model"
    fetch_ted_model:
      type: object
      required: ["amount", "search_criteria", "dataset_name"]
      properties:
        amount:
          type: integer
          format: integer
        search_criteria:
          type: integer
          format: integer
        original_languages:
          type: array
          items:
            type: string
        languages:
          type: array
          items:
            type: string
        dataset_name:
          type: string
          format: string
      example:
        amount: 100
        search_criteria: " AND PC=[72*] AND CY=[DE OR FR] "
        original_languages:
          - "DE"
          - "FR"
        languages:
          - "EN"
        dataset_name: "example-dataset"
    validation_result:
      type: object
      properties:
        tn:
          type: integer
          format: integer
        fp:
          type: integer
          format: integer
        fn:
          type: integer
          format: integer
        tp:
          type: integer
          format: integer
        accuracy:
          type: number
          format: double
        precision:
          type: number
          format: double
        recall:
          type: number
          format: double
        f1:
          type: number
          format: double